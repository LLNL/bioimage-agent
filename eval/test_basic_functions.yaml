
# Test 1: Load the SNAP_IgM_BCR_Cell_1_ch0_t14.tif file into Napari
- vars:
    question: |
      Load the "D:/Development/napari-mcp/eval/eval_examples/SNAP_IgM_BCR_Cell_1_ch0_t14.tif" file in Napari. 
      Respond with <1> if the file was successfully loaded or <0> if it failed. Only respond with <1> or <0>. 
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 2: add layer
- vars:
    question: |
      Load the "D:/Development/napari-mcp/eval/eval_examples/SNAP_IgM_BCR_Cell_1_ch1_t14.tif" file in Napari. 
      Respond with <1> if the layers named SNAP_IgM_BCR_Cell_1_ch1_t14 and SNAP_IgM_BCR_Cell_1_ch0_t14 were loaded or <0> otherwise. Only respond with <1> or <0>. 
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 3: switch to 3D view
- vars:
    question: |
      Switch the view to 3D mode in Napari.
  assert:
    - type: llm-rubric
      value: 
        - the 3D view has been toggled
  options:
    cache: false
    runSerially: true

# Test 4: create MIPs 
- vars:
    question: |
      Visualize the loaded layers using MIPs (Maximum Intensity Projections) and blend the channels additively. Set channel 0 to green color and channel 1 to magenta color. Take a screenshot of the result. 
      Analyze the screenshot and respond with <1> if both colors are present or <0> otherwise.  Only respond with <1> or <0>. 
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 5: inspect the viewport 
- vars:
    question: |
      Take a screenshot of the viewport and analyze it. Respond with what you see in the screenshot and what colors the objects have. 
  assert:
    - type: llm-rubric
      value: 
       - It saw magenta cells.  
  options:
    cache: false
    runSerially: true

# Test 6: count whole  cells
- vars:
    question: |
      Count how many magenta cells you can see in the current view that are not cut off by the edges of the view. Take a screenshot and analyze it to count the magenta-colored whole cells.
      Respond with the number of magenta cells you count, for example 5 if you see 5 magenta cells.
  assert:
    - type: llm-rubric
      value: 
       - It counted 2 complete cells
  options:
    cache: false
    runSerially: true

# Test 7: rotate camera to side view
- vars:
    question: |
      The viewport is already in 3D mode. If it is not, switch to 3D mode. Change the view angle so you can see the cells from a different perspective. Take a screenshot to verify the camera has been changed.
      After the screenshot, switch back to the default view in 3D mode. Respond with <1> if the camera was successfully rotated to show a side view, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 8: toggle layer visibility
- vars:
    question: |
      Toggle the visibility of the SNAP_IgM_BCR_Cell_1_ch0_t14 layer (make it invisible). Take a screenshot to verify. Toggle the visibility back to visible after the test.
      Respond with <1> if the layer was successfully hidden, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# #TODO error: only integer types are supported for Labels layers, but data contains

# # Test 9: reorder layers
# - vars:
#     question: |
#       Move the SNAP_IgM_BCR_Cell_1_ch1_t14 layer to the top of the layer list. Check the layer order.
#   assert:
#     - type: llm-rubric
#       value: 
#         - the layer was moved to the top
#         - the index of the layer is 1
#   options:
#     cache: false
#     runSerially: true

# Test 11: adjust layer opacity
- vars:
    question: |
      Set the opacity of SNAP_IgM_BCR_Cell_1_ch1_t14 layer to 0%. Take a screenshot to verify. Set the opacity back to 100% after the test.
      Respond with <1> if only green is visible, or <0> otherwise. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true


# Test 13: zoom camera
- vars:
    question: |
      Zoom in on the cells so they appear larger in the viewport. Take a screenshot to verify the zoom.
      Respond with <1> if the zoom was successful, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 14: reset camera view
- vars:
    question: |
      Reset the camera to the default view (home position). Take a screenshot to verify.
      Respond with <1> if the camera was reset successfully, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 15: pan camera
- vars:
    question: |
      Pan the camera to move the view to the left. Take a screenshot to verify the pan.
      Respond with <1> if the pan was successful, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 16: measure distance between cells
- vars:
    question: |
      Use the measurement tool to measure the distance between two magenta cells. Take a screenshot showing the measurement.
      Respond with <1> if the measurement was successful, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 17: intensity profile
- vars:
    question: |
      Create an intensity profile line across one of the magenta cells. Take a screenshot showing the profile.
      Respond with <1> if the profile was created successfully, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 18: volume rendering
- vars:
    question: |
      Switch to volume rendering mode for the 3D data. Take a screenshot to verify the volume rendering.
      Respond with <1> if volume rendering was activated successfully, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 19: surface rendering
- vars:
    question: |
      Convert the volume data to surface rendering. Take a screenshot to verify the surface.
      Respond with <1> if surface rendering was created successfully, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 20: save screenshot
- vars:
    question: |
      Save the current view as a screenshot to a file. Check if the file was created.
      Respond with <1> if the screenshot was saved successfully, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 21: export data
- vars:
    question:
      Export the current view data to a file. Check if the export was successful.
      Respond with <1> if the data was exported successfully, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 22: handle invalid file
- vars:
    question: |
      Try to load a non-existent file "nonexistent.tif". Check if an appropriate error was handled.
      Respond with <1> if the error was handled gracefully, or <0> if it crashed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 23: handle invalid layer operations
- vars:
    question: |
      Try to delete a layer that doesn't exist. Check if an appropriate error was handled.
      Respond with <1> if the error was handled gracefully, or <0> if it crashed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 24: large file performance
- vars:
    question: |
      Load a large image file and measure the time it takes. Check if the loading was successful.
      Respond with <1> if the large file loaded successfully, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true

# Test 25: complex multi-layer visualization
- vars:
    question: |
      Create a complex visualization: set different blending modes for each layer, adjust opacities, and apply different colormaps. Take a screenshot.
      Respond with <1> if the complex setup was successful, or <0> if it failed. Only respond with <1> or <0>.
  assert:
    - type: contains-all
      value: "<1>"
    - type: not-contains
      value: "<0>"
  options:
    cache: false
    runSerially: true


  
# Test k-1: switch to 2D view (to make sure napari is reset so we can run the tests again)
- vars:
    question: |
      Switch the view to 2D mode in Napari.
  assert:
    - type: llm-rubric
      value: 
        - the 2D view has been toggled
  options:
    cache: false
    runSerially: true

# Test k: delete the two layers
- vars:
    question: |
      Delete the layers named SNAP_IgM_BCR_Cell_1_ch1_t14 and SNAP_IgM_BCR_Cell_1_ch0_t14 from Napari.
  assert:
    - type: llm-rubric
      value: 
        - all layers have been deleted
  options:
    cache: false
    runSerially: true

# # Test k: camera rotation (to make sure napari is reset so we can run the tests again)
# - vars:
#     question: |
#       Control the camera by rotating the volume to the side. Rotate the 3D view so that the volume is viewed from a different angle (side view). Take a screenshot to verify the rotation has occurred.
#       Analyze the screenshot and respond with:
#       Camera rotated: [yes/no]
#       Side view visible: [yes/no]
#       Different angle achieved: [yes/no]
#   assert:
#     - type: contains-all
#       value: 
#         - "camera"
#         - "rotated"
#         - "yes"
#   options:
#     cache: false
#     runSerially: true

